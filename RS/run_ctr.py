import subprocess

# Training args
dataset_name = 'ml-10m-new'
# dataset_name = 'amz-new'
data_dir = f'../data/{dataset_name}/proc_data'
task_name = 'ctr'
framework = 'KAR' # framework: KAR & TRAWL & ONCE & RLMRec
# framework = 'TRAWL'
# framework = 'ONCE'
# framework = 'RLMRec'
llm_name = 'vicuna-7b-v1.3'
relaxed = True  # whether to use augmented knowledge generated by relaxed verification
# relaxed = False
if dataset_name == 'amz-new' and relaxed == True:
    item_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_item_ans_0_80000_p0.1_k2'
    hist_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_history_ans_0_50000_p0.1_k2'
elif dataset_name == 'amz-new' and relaxed == False:
    item_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_item_ans_0_80000_p0.0_k1'
    hist_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_history_ans_0_50000_p0.0_k1'
elif dataset_name == 'ml-10m-new' and relaxed == True:
    item_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_item_ans_0_20000_p0.1_k2'
    hist_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_history_ans_0_70000_p0.1_k2'
elif dataset_name == 'ml-10m-new' and relaxed == False:
    item_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_item_ans_0_20000_p0.0_k1'
    hist_aug_prefix = f'{framework}/{llm_name}/bert_avg_recent_history_ans_0_70000_p0.0_k1'
else:
    raise NotImplementedError

augment = True  # whether to use augmented knowledge
# augment = False


epoch = 20
batch_size = 256
lr = '5e-4'
lr_sched = 'cosine'
weight_decay = 0  #效果不大

model = 'DIN'  # downstream CTR model: DIN & DCNv2 & DCNv1 & AutoInt & FiBiNet & FiGNN
# model = 'DCNv2'
# model = 'AutoInt'
# model = 'DeepFM'
# model = 'FiBiNet'
# model = 'FiGNN'
embed_size = 32
final_mlp = '200,80'
num_cross_layers = 3
dropout = 0.0  #增大会变差
item_cl_weight = 0.1
user_cl_weight = 0.1

if framework in ['KAR', 'TRAWL']:
    convert_type = 'MoE'
    export_nums = [1, 2, 3, 4, 5, 6]
else:
    convert_type = 'MLP'
    export_nums = [1]
if framework == 'ONCE':
    convert_arch = '128, 32'
else:
    convert_arch = '64'
convert_dropout = 0.0
specific_export_num = 1
dien_gru = 'AIGRU'

if framework in ['RLMRec', 'TRAWL']:
    item_cl_weights = [0.0, 0.1, 0.2, 0.5, 1, 2]
    user_cl_weight = [0.0, 0.1, 0.2, 0.5, 1, 2]
else:
    item_cl_weights = [0.0]
    user_cl_weight = [0.0]


# Run the train process
for batch_size in [256, 512, 128, 1024,]:
    for lr in ['1e-4', '5e-4', '1e-3', '2e-3']:
    # for lr in ['7e-4', '1e-3', '1.5e-3',  '2e-3']:
    # for lr in ['2e-4', '3e-4', '7e-4']:
        for item_cl_weight in item_cl_weights:
            for user_cl_weight in user_cl_weight:
                for export_num in export_nums:

                    print('---------------bs, lr, epoch, export share, convert arch, gru, model, item, user----------', batch_size,
                          lr, epoch, export_num, convert_arch, dien_gru, model, item_cl_weight, user_cl_weight)
                    subprocess.run(['python', '-u', 'main_ctr.py',
                                    f'--save_dir=./model/{dataset_name}/{task_name}/{model}/{framework}_WDA_Emb{embed_size}_epoch{epoch}'
                                    f'_bs{batch_size}_lr{lr}_{lr_sched}_cnvt_arch_{convert_arch}_cnvt_type_{convert_type}'
                                    f'_eprt_{export_num}_wd{weight_decay}_drop{dropout}' + \
                                    f'_hl{final_mlp}_cl{num_cross_layers}_augment_{augment}',
                                    f'--data_dir={data_dir}',
                                    f'--framework={framework}',
                                    f'--augment={augment}',
                                    f'--item_aug_prefix={item_aug_prefix}',
                                    f'--hist_aug_prefix={hist_aug_prefix}',
                                    f'--task={task_name}',
                                    f'--convert_arch={convert_arch}',
                                    f'--convert_type={convert_type}',
                                    f'--convert_dropout={convert_dropout}',
                                    f'--epoch_num={epoch}',
                                    f'--batch_size={batch_size}',
                                    f'--lr={lr}',
                                    f'--item_cl_weight={item_cl_weight}',
                                    f'--user_cl_weight={user_cl_weight}',
                                    f'--lr_sched={lr_sched}',
                                    f'--weight_decay={weight_decay}',
                                    f'--algo={model}',
                                    f'--embed_size={embed_size}',
                                    f'--export_num={export_num}',
                                    f'--specific_export_num={specific_export_num}',
                                    f'--final_mlp_arch={final_mlp}',
                                    f'--dropout={dropout}',
                                    f'--dien_gru={dien_gru}'
                                    ])
            # exit()

# CUDA_VISIBLE_DEVICES=0 nohup python run_ctr.py &> res/08_08_ml_10m_KAR_DIN_augment_relaxed.log &